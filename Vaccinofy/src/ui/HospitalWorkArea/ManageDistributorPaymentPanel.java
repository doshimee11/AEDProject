/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui.HospitalWorkArea;

import Business.Ecosystem;
import Business.Employee.Employee;
import Business.Enterprise.Enterprise;
import Business.Enterprise.ProviderEnterprise;
import Business.Network.Network;
import Business.Order.Order;
import Business.Order.OrderItem;
import Business.Organization.OrderOrganization;
import Business.Organization.Organization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.PaymentRequest;
import Business.WorkQueue.WorkRequest;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ADMIN
 */

public class ManageDistributorPaymentPanel extends javax.swing.JPanel {
    
    /**
     * Creates new form ManageDistributorPaymentJPanel
     */
    
    private JPanel userProcessContainer;
    private Ecosystem system;
    private UserAccount userAccount;
    
    public ManageDistributorPaymentPanel(JPanel userProcessContainer, Ecosystem system, UserAccount userAccount) {
        initComponents();
        
        this.userProcessContainer = userProcessContainer;
        this.system = system;
        this.userAccount = userAccount;
        
        populateBillTable();
    }
    
    public void populateBillTable() {
        DefaultTableModel dtm = (DefaultTableModel) billTable.getModel();
        dtm.setRowCount(0);

        for (WorkRequest request : userAccount.getWorkQueue().getWorkRequestList()) {
            Object[] row = new Object[6];
            row[0] = request;
            row[1] = request.getOrderID();
            float totalPrice = 0;
            Enterprise enterprise = null;
            Network net = null;
            
            for (Network network : system.getNetworkDirectory()) {
                for (Enterprise ent : network.getEnterpriseDirectory().getEnterprisesDirectory()) {
                    for (Organization organization : ent.getOrganizationDirectory().getOrganizationDirectory()) {
                        for (UserAccount userAccount1 : organization.getUserAccountDirectory().getUserAccountDirectory()) {
                            if (userAccount1 == userAccount) {
                                net = network;
                            }
                        }
                    }
                }
            }
            
            for (Enterprise ent : net.getEnterpriseDirectory().getEnterprisesDirectory()) {
                if (ent instanceof ProviderEnterprise) {
                    enterprise = ent;
                    break;
                }
            }
            
            UserAccount uu = null;
            for (Organization o : enterprise.getOrganizationDirectory().getOrganizationDirectory()) {
                if (o instanceof OrderOrganization) {
                    for (UserAccount user : o.getUserAccountDirectory().getUserAccountDirectory()) {
                        uu = user;
                    }
                }
            }
            
            for (Order order : uu.getEmployee().getOrderCatalog().getOrderList()) {
                if (request.getOrderID() == order.getOrderID()) {
                    for (OrderItem orderItem : order.getOrderItemList()) {
                        float price = orderItem.getVaccine().getVaccinePrice() * orderItem.getItemQuantity();
                        totalPrice = totalPrice + price;
                    }

                }
            }
            
            row[2] = totalPrice;
            row[3] = request.getSender();
            row[4] = request.getReceiver();
            row[5] = request.getStatus();
            dtm.addRow(row);
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        billTable = new javax.swing.JTable();
        viewOrderButton = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        orderTable = new javax.swing.JTable();
        payBillButton = new javax.swing.JButton();
        assignButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        billTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Request Type", "Order ID", "Total Price", "Sender", "Receiver", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(billTable);

        viewOrderButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        viewOrderButton.setText("View Order");
        viewOrderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewOrderButtonActionPerformed(evt);
            }
        });

        orderTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Vaccine Name", "Quantity"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(orderTable);

        payBillButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        payBillButton.setText("Pay bill");
        payBillButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                payBillButtonActionPerformed(evt);
            }
        });

        assignButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        assignButton.setText("Assign to me");
        assignButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignButtonActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setText("Manage Distributor Payment");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(472, 472, 472)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(250, 250, 250)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 754, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(250, 250, 250)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 754, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(318, 318, 318)
                .addComponent(viewOrderButton)
                .addGap(102, 102, 102)
                .addComponent(assignButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(payBillButton, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(330, 330, 330))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jLabel1)
                .addGap(35, 35, 35)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(payBillButton)
                    .addComponent(viewOrderButton)
                    .addComponent(assignButton))
                .addGap(12, 12, 12)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void viewOrderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewOrderButtonActionPerformed
        
        int selectedRow = billTable.getSelectedRow();
        if (selectedRow >= 0) {
            WorkRequest request = (WorkRequest) billTable.getValueAt(selectedRow, 0);
            Enterprise enterprise = null;
            Network net = null;
            
            for (Network network : system.getNetworkDirectory()) {
                for (Enterprise ent : network.getEnterpriseDirectory().getEnterprisesDirectory()) {
                    for (Organization organization : ent.getOrganizationDirectory().getOrganizationDirectory()) {
                        for (UserAccount userAccount1 : organization.getUserAccountDirectory().getUserAccountDirectory()) {
                            if (userAccount1 == userAccount) {
                                net = network;
                            }
                        }
                    }
                }
            }
            
            for (Enterprise ent : net.getEnterpriseDirectory().getEnterprisesDirectory()) {
                if (ent instanceof ProviderEnterprise) {
                    enterprise = ent;
                    break;
                }
            }
            
            UserAccount uu = null;
            for (Organization o : enterprise.getOrganizationDirectory().getOrganizationDirectory()) {
                if (o instanceof OrderOrganization) {
                    for (UserAccount user : o.getUserAccountDirectory().getUserAccountDirectory()) {
                        uu = user;
                    }
                }
            }
            
            DefaultTableModel dtm = (DefaultTableModel) orderTable.getModel();
            dtm.setRowCount(0);

            Order orderI = null;
            for (Order order : uu.getEmployee().getOrderCatalog().getOrderList()) {
                if (request.getOrderID() == order.getOrderID()) {
                    orderI = order;
                }
            }
            
            for (OrderItem orderItem : orderI.getOrderItemList()) {
                Object[] row = new Object[2];
                row[0] = orderItem;
                row[1] = orderItem.getItemQuantity();
                dtm.addRow(row);
            }
            
        }
        else {
            JOptionPane.showMessageDialog(null, "Please select a row first", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
    }//GEN-LAST:event_viewOrderButtonActionPerformed

    private void payBillButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_payBillButtonActionPerformed
        
        int selectedRow = billTable.getSelectedRow();
        
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row from the table.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        if (billTable.getValueAt(selectedRow, 5) == "Paid") {
            JOptionPane.showMessageDialog(null, "The bill is already Paid", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        if (billTable.getValueAt(selectedRow, 4) == null) {
            JOptionPane.showMessageDialog(null, "The request is yet to be assigned to the Distributor", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        PaymentRequest paymentRequest = (PaymentRequest) billTable.getValueAt(selectedRow, 0);
        paymentRequest.setPaymentRequest("Paid");
        paymentRequest.setStatus("Paid");
        populateBillTable();
        JOptionPane.showMessageDialog(null, "Bill paid", "Payment Request", JOptionPane.INFORMATION_MESSAGE);
        
    }//GEN-LAST:event_payBillButtonActionPerformed

    private void assignButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignButtonActionPerformed
        
        int selectedRow = billTable.getSelectedRow();
        
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row from the table.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        if (billTable.getValueAt(selectedRow, 4) != null) {
            JOptionPane.showMessageDialog(null, "The request is already assigned", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        PaymentRequest request = (PaymentRequest) billTable.getValueAt(selectedRow, 0);
        request.setReceiver(userAccount);
        request.setStatus("Pending");
        UserAccount user = (UserAccount) request.getSender();
        Employee person = (Employee) user.getEmployee();
        for (Order order : person.getOrderCatalog().getOrderList()) {
            if (request.getOrderID() == order.getOrderID()) {
                order.setOrderStatus("Waiting to be approved by National Distributor");
            }
        }
        
        populateBillTable();
        
        JOptionPane.showMessageDialog(null, "The request is assigned to " + request.getReceiver());
        
    }//GEN-LAST:event_assignButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton assignButton;
    private javax.swing.JTable billTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable orderTable;
    private javax.swing.JButton payBillButton;
    private javax.swing.JButton viewOrderButton;
    // End of variables declaration//GEN-END:variables
}
